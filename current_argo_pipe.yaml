apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: argo-pipeline-
spec:
  entrypoint: pipeline
  volumeClaimTemplates:
    - metadata:
        name: workspace-pvc
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi
        storageClassName: openebs-hostpath
        persistentVolumeReclaimPolicy: Delete
  templates:
    - name: pipeline
      steps:
        - - name: clone-repo
            template: git-clone
        - - name: build-docker-image
            template: build-image
        - - name: push-image
            template: push-image
        - - name: deploy-app
            template: deploy

    - name: git-clone
      container:
        image: alpine/git:latest
        command: [sh, -c]
        args:
          - |
            echo "Cloning repository..."
            git clone https://${GITHUB_USERNAME}:${GITHUB_TOKEN}@github.com/${GITHUB_USERNAME}/Simple_Spring_Project.git /workspace/Simple_Spring_Project
        env:
          - name: GITHUB_USERNAME
            valueFrom:
              secretKeyRef:
                name: github-creds
                key: username
          - name: GITHUB_TOKEN
            valueFrom:
              secretKeyRef:
                name: github-creds
                key: token
        volumeMounts:
          - name: workspace-pvc
            mountPath: /workspace

    - name: build-image
      container:
        image: docker:19.03-dind
        securityContext:
          privileged: true
        command: [sh, -c]
        args:
          - |
            echo "Creating /etc/docker/daemon.json..."
            mkdir -p /etc/docker
            echo '{
                "insecure-registries" : [ "harbor-core.harbor.svc.cluster.local" ]
            }' > /etc/docker/daemon.json
            echo "Starting Docker daemon..."
            dockerd &  # Start Docker daemon
            sleep 10   # Wait for the daemon to initialize
            echo "Docker Config:"
            ls /root/.docker/
            cd /workspace/Simple_Spring_Project/spring-project
            echo "Building Docker image..."
            docker build -t harbor-core.harbor.svc.cluster.local/test-discovery/simple-spring:test .
            echo "Saving Docker image to volume..."
            mkdir /workspace/workspace-pvc
            docker save harbor-core.harbor.svc.cluster.local/test-discovery/simple-spring:test | gzip > /workspace/workspace-pvc/my-image.tar.gz
        volumeMounts:
          - name: workspace-pvc
            mountPath: /workspace


    - name: push-image
      container:
        image: docker:19.03-dind
        securityContext:
          privileged: true
        command: [sh, -c]
        args:
          - |
            echo "Creating /etc/docker/daemon.json..."
            mkdir -p /etc/docker
            echo '{"insecure-registries" : [ "harbor-core.harbor.svc.cluster.local" ]}' > /etc/docker/daemon.json
            sleep 15
            echo "Starting Docker daemon..."
            dockerd &  
            sleep 25 
            echo "Verifying Docker daemon status..."
            docker version
            docker info
            echo "Loading Docker image from volume..."
            echo "Proper configuration"
            cat /etc/docker/daemon.json
            ls -l /etc/docker/daemon.json
            docker load < /workspace/workspace-pvc/my-image.tar.gz
            echo "Logging in to Harbor registry..."
            docker login http://harbor-core.harbor.svc.cluster.local -u $HARBOR_USER -p $HARBOR_PASS
            sleep 10 
            echo "Pushing the image to Harbor..."
            docker push harbor-core.harbor.svc.cluster.local/test-discovery/simple-spring:test

        env:
          - name: HARBOR_USER
            valueFrom:
              secretKeyRef:
                name: docker-registry-secret
                key: username
          - name: HARBOR_PASS
            valueFrom:
              secretKeyRef:
                name: docker-registry-secret
                key: password

        volumeMounts:
          - name: workspace-pvc
            mountPath: /workspace
    - name: deploy
      container:
        image: bitnami/kubectl:latest
        command: [sh, -c]
        args:
          - |
            NAMESPACE="spring-app"
            echo "Ensuring namespace $NAMESPACE exists..."
            kubectl get namespace $NAMESPACE || kubectl create namespace $NAMESPACE
            
            echo "Deploying resources..."
            kubectl apply -n $NAMESPACE -f /workspace/Simple_Spring_Project/simple_spring_app.yaml
            kubectl apply -f /workspace/Simple_Spring_Project/simple_spring_app.yaml
        volumeMounts:
          - name: workspace-pvc
            mountPath: /workspace