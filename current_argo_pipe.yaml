apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: argo-pipeline-
spec:
  entrypoint: pipeline
  volumeClaimTemplates:
    - metadata:
        name: workspace-pvc
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi
        storageClassName: openebs-hostpath
        persistentVolumeReclaimPolicy: Delete
  templates:
    - name: pipeline
      steps:
        - - name: clone-repo
            template: git-clone
        - - name: build-docker-image
            template: build-image
        - - name: push-image
            template: push-image
        - - name: deploy-app
            template: deploy

    - name: git-clone
      container:
        image: alpine/git:latest
        command: [sh, -c]
        args:
          - |
            set -e
            echo "Cloning repository..."
            git clone https://${GITHUB_USERNAME}:${GITHUB_TOKEN}@github.com/${GITHUB_USERNAME}/Simple_Spring_Project.git /workspace/Simple_Spring_Project || {
                echo "Failed to clone repository. Exiting.";
                exit 1;
            }
        env:
          - name: GITHUB_USERNAME
            valueFrom:
              secretKeyRef:
                name: github-creds
                key: username
          - name: GITHUB_TOKEN
            valueFrom:
              secretKeyRef:
                name: github-creds
                key: token
        volumeMounts:
          - name: workspace-pvc
            mountPath: /workspace

    - name: build-image
      container:
        image: docker:19.03-dind
        securityContext:
          privileged: true
        command: [sh, -c]
        args:
          - |
            set -e
            echo "Configuring Docker daemon..."
            mkdir -p /etc/docker
            echo '{
                "insecure-registries" : [ "harbor-core.harbor.svc.cluster.local" ]
            }' > /etc/docker/daemon.json
            echo "Starting Docker daemon..."
            dockerd &  
            sleep 10 

            echo "Building Docker image..."
            cd /workspace/Simple_Spring_Project/spring-project
            docker build -t harbor-core.harbor.svc.cluster.local/test-discovery/simple-spring:test . || {
                echo "Failed to build Docker image. Exiting.";
                exit 1;
            }
            echo "Saving Docker image to volume..."
            docker save harbor-core.harbor.svc.cluster.local/test-discovery/simple-spring:test | gzip > /workspace/workspace-pvc/my-image.tar.gz || {
                echo "Failed to save Docker image. Exiting.";
                exit 1;
            }
        volumeMounts:
          - name: workspace-pvc
            mountPath: /workspace

    - name: push-image
      container:
        image: docker:19.03-dind
        securityContext:
          privileged: true
        command: [sh, -c]
        args:
          - |
            set -e
            echo "Configuring Docker daemon..."
            mkdir -p /etc/docker
            echo '{"insecure-registries" : [ "harbor-core.harbor.svc.cluster.local" ]}' > /etc/docker/daemon.json
            dockerd &  
            sleep 10 

            echo "Loading Docker image from volume..."
            docker load < /workspace/workspace-pvc/my-image.tar.gz || {
                echo "Failed to load Docker image. Exiting.";
                exit 1;
            }

            echo "Logging in to Harbor registry..."
            for i in {1..5}; do
                if docker login http://harbor-core.harbor.svc.cluster.local -u "$HARBOR_USER" -p "$HARBOR_PASS"; then
                    echo "Login Succeeded"
                    break
                else
                    echo "Login failed. Retrying... ($i/5)"
                    sleep 2
                fi
                if [ "$i" -eq 5 ]; then
                    echo "Login failed after 5 attempts. Exiting.";
                    exit 1;
                fi
            done

            echo "Pushing Docker image..."
            docker push harbor-core.harbor.svc.cluster.local/test-discovery/simple-spring:test || {
                echo "Failed to push Docker image. Exiting.";
                exit 1;
            }
        env:
          - name: HARBOR_USER
            valueFrom:
              secretKeyRef:
                name: docker-registry-secret
                key: username
          - name: HARBOR_PASS
            valueFrom:
              secretKeyRef:
                name: docker-registry-secret
                key: password
        volumeMounts:
          - name: workspace-pvc
            mountPath: /workspace

    - name: deploy
      container:
        image: bitnami/kubectl:latest
        command: [sh, -c]
        args:
          - |
            set -e
            NAMESPACE="spring-app"
            echo "Ensuring namespace $NAMESPACE exists..."
            kubectl get namespace $NAMESPACE || kubectl create namespace $NAMESPACE || {
                echo "Failed to ensure namespace exists. Exiting.";
                exit 1;
            }

            echo "Copying secret to target namespace..."
            kubectl get secret fintech-harbor -n argo -o yaml | sed "s/namespace: argo/namespace: $NAMESPACE/" | kubectl apply -n $NAMESPACE -f - || {
                echo "Failed to copy secret. Exiting.";
                exit 1;
            }

            echo "Deploying application..."
            kubectl apply -n $NAMESPACE -f /workspace/Simple_Spring_Project/simple_spring_app.yaml || {
                echo "Failed to deploy application. Exiting.";
                exit 1;
            }
        volumeMounts:
          - name: workspace-pvc
            mountPath: /workspace
